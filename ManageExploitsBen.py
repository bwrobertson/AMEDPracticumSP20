# -*- coding: utf-8 -*-
############################################
#           Changes Start Here             #
############################################
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import os, sys
import base64
from pymongo import MongoClient
from bson.objectid import ObjectId
from zipfile import ZipFile
from datetime import date
import time
from DBConfiguration import Ui_DBConfiguration

class Ui_ManageData(object):

    exploitList = {}

    # Opens a file browser window
    def importButtonStatus(self, path):
        try:
            client = MongoClient(Ui_DBConfiguration.dbConnection)
        except:
            client = MongoClient("mongodb+srv://BWR:benji@adventurermart-j760a.mongodb.net/test")
        db = client.Test
        data = db["Exploits"]
        if os.path.exists(path):
            self.importButton.setEnabled(True)

    def fileBrowser(self):
        options = QFileDialog.Options()
        self.dialog = QFileDialog()
        self.dialog.setOptions(options)
        self.path, __ = QFileDialog.getOpenFileName(self.dialog, "Select Directory")

        if self.path:
            #If Windows, change the separator
            if self.path == 'C:\\':
                self.path = self.path.replace('/', '\\')
                self.destinationDirectoryLINEEDIT.setText(self.path)
                #os.chdir(self.path)
                return self.path
            # if Linux-based
            else:
                self.destinationDirectoryLINEEDIT.setText(self.path)
                #os.chdir(self.path)
                return self.path
        else:
            self.destinationDirectoryLINEEDIT.setText(self.path)
            return ""

    def selectExploit(self):
        try:
            client = MongoClient(Ui_DBConfiguration.dbConnection)
        except:
            client = MongoClient("mongodb+srv://BWR:benji@adventurermart-j760a.mongodb.net/test")
        db = client.Test
        data = db["Exploits"]
        x=0
        for collection in data.find():
            if (self.tree["parent{0}".format(x)].checkState(0) == QtCore.Qt.Checked):
                self.exploitList[collection['name']] = collection
            x+=1
        self.translateExploit()

    def translateExploit(self):
        #print(self.exploitList['rubySlippers']['File'])
        for key in self.exploitList:
            self.exploitList[key]['File'] = base64.decodebytes(self.exploitList[key]['File'])

    def setupUi(self, ManageData):


        x=0
        y=0
        self.tree={}

        ManageData.setObjectName("ManageData")
        ManageData.resize(622, 479)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ManageData.sizePolicy().hasHeightForWidth())
        ManageData.setSizePolicy(sizePolicy)
        ManageData.setMinimumSize(QtCore.QSize(622, 479))
        ManageData.setMaximumSize(QtCore.QSize(622, 479))
        self.layoutWidget = QtWidgets.QWidget(ManageData)
        self.layoutWidget.setGeometry(QtCore.QRect(31, 34, 551, 411))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.destinationDirectoryLABEL = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.destinationDirectoryLABEL.setFont(font)
        self.destinationDirectoryLABEL.setObjectName("destinationDirectoryLABEL")
        self.verticalLayout.addWidget(self.destinationDirectoryLABEL)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.destinationDirectoryLINEEDIT = QtWidgets.QLineEdit(self.layoutWidget)
        self.destinationDirectoryLINEEDIT.setObjectName("destinationDirectoryLINEEDIT")
        self.horizontalLayout.addWidget(self.destinationDirectoryLINEEDIT)

        self.browserBUTTON = QtWidgets.QPushButton(self.layoutWidget)
        self.browserBUTTON.setEnabled(True)
        self.browserBUTTON.setObjectName("browserBUTTON")
        self.browserBUTTON.clicked.connect(self.fileBrowser)

        self.horizontalLayout.addWidget(self.browserBUTTON)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_2.addLayout(self.verticalLayout)

        self.databseTREEWIDGET = QtWidgets.QTreeWidget(self.layoutWidget)
        self.databseTREEWIDGET.setObjectName("databseTREEWIDGET")
        self.databseTREEWIDGET.headerItem().setText(0, "1")
        self.setupTree(ManageData)

        self.databseTREEWIDGET.header().setVisible(False)
        self.verticalLayout_2.addWidget(self.databseTREEWIDGET)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.backBUTTON = QtWidgets.QPushButton(self.layoutWidget)
        self.backBUTTON.setObjectName("backBUTTON")
        self.horizontalLayout_2.addWidget(self.backBUTTON)
        spacerItem = QtWidgets.QSpacerItem(38, 28, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.importButton = QtWidgets.QPushButton(self.layoutWidget)
        self.importButton.setObjectName("importButton")
        self.importButton.setEnabled(False)
        self.horizontalLayout_2.addWidget(self.importButton)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.nextButton = QtWidgets.QPushButton(self.layoutWidget)
        self.nextButton.setObjectName("nextButton")
        self.nextButton.clicked.connect(self.selectExploit)
        self.destinationDirectoryLINEEDIT.textChanged.connect(self.importButtonStatus)
        #self.nextButton.clicked.connect(self.progress)
        self.horizontalLayout_2.addWidget(self.nextButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)

        self.retranslateUi(ManageData)
        QtCore.QMetaObject.connectSlotsByName(ManageData)

    def retranslateUi(self, ManageData):
        j = 0
        i = 0
        client = MongoClient("mongodb+srv://BWR:benji@adventurermart-j760a.mongodb.net/test")
        db = client.Test
        data = db["Exploits"]
        _translate = QtCore.QCoreApplication.translate
        ManageData.setWindowTitle(_translate("ManageData", "Manage Data"))
        self.destinationDirectoryLABEL.setText(_translate("ManageData", "Destination Directory:"))
        self.browserBUTTON.setText(_translate("ManageData", "Browse"))
        __sortingEnabled = self.databseTREEWIDGET.isSortingEnabled()
        self.databseTREEWIDGET.setSortingEnabled(False)
        for collection in data.find():
            j=0
            self.databseTREEWIDGET.topLevelItem(i).setText(0, _translate("Export", collection['name']))
            for key in collection:
                if(key!="_id" and key!="name" and key!='File'):
                    self.databseTREEWIDGET.topLevelItem(i).child(j).setText(0, _translate("Export", key + ' : ' + collection[key]))
                    j+=1
            i+=1
        self.databseTREEWIDGET.setSortingEnabled(__sortingEnabled)
        self.backBUTTON.setText(_translate("ManageData", "Back"))
        self.importButton.setText(_translate("ManageData", "Import"))
        self.nextButton.setText(_translate("ManageData", "Next"))

    def setupTree(self, ManageData):
        x=0
        y=0
        try:
            client = MongoClient(Ui_DBConfiguration.dbConnection)
        except:
            client = MongoClient("mongodb+srv://BWR:benji@adventurermart-j760a.mongodb.net/test")
        db = client.Test
        data = db["Exploits"]
        for collection in data.find():
            self.tree["parent{0}".format(x)] = QtWidgets.QTreeWidgetItem(self.databseTREEWIDGET)
            self.tree["parent{0}".format(x)].setCheckState(0, QtCore.Qt.Unchecked)
            #self.tree["parent{0}".format(x)].setFlags(QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled|QtCore.Qt.ItemIsTristate)
            for key in collection:
                if(key!="_id" and key!="name" and key!='File'):
                    self.tree["child{0}".format(y)] = QtWidgets.QTreeWidgetItem(self.tree["parent{0}".format(x)])
                    #self.tree["child{0}".format(y)].setCheckState(0, QtCore.Qt.Unchecked)
                    y+=1
            x+=1
        return ManageData


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ManageData = QtWidgets.QWidget()
    ui = Ui_ManageData()
    ui.setupUi(ManageData)
    ManageData.show()
    sys.exit(app.exec_())
